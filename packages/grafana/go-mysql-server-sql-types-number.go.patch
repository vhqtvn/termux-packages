--- ./vendor/github.com/dolthub/go-mysql-server/sql/types/number.go.orig	2025-05-21 04:40:24.703481309 +0000
+++ ./vendor/github.com/dolthub/go-mysql-server/sql/types/number.go	2025-05-21 04:41:24.064129273 +0000
@@ -1122,27 +1122,27 @@
 		return uint64(v.UTC().Unix()), sql.InRange, nil
 	case int:
 		if v < 0 {
-			return uint64(math.MaxUint64 - uint(-v-1)), sql.OutOfRange, nil
+			return uint64(math.MaxUint64 - uint64(-v-1)), sql.OutOfRange, nil
 		}
 		return uint64(v), sql.InRange, nil
 	case int8:
 		if v < 0 {
-			return uint64(math.MaxUint64 - uint(-v-1)), sql.OutOfRange, nil
+			return uint64(math.MaxUint64 - uint64(-v-1)), sql.OutOfRange, nil
 		}
 		return uint64(v), sql.InRange, nil
 	case int16:
 		if v < 0 {
-			return uint64(math.MaxUint64 - uint(-v-1)), sql.OutOfRange, nil
+			return uint64(math.MaxUint64 - uint64(-v-1)), sql.OutOfRange, nil
 		}
 		return uint64(v), sql.InRange, nil
 	case int32:
 		if v < 0 {
-			return uint64(math.MaxUint64 - uint(-v-1)), sql.OutOfRange, nil
+			return uint64(math.MaxUint64 - uint64(-v-1)), sql.OutOfRange, nil
 		}
 		return uint64(v), sql.InRange, nil
 	case int64:
 		if v < 0 {
-			return uint64(math.MaxUint64 - uint(-v-1)), sql.OutOfRange, nil
+			return uint64(math.MaxUint64 - uint64(-v-1)), sql.OutOfRange, nil
 		}
 		return uint64(v), sql.InRange, nil
 	case uint:
@@ -1212,35 +1212,35 @@
 	switch v := v.(type) {
 	case int:
 		if v < 0 {
-			return uint32(math.MaxUint32 - uint(-v-1)), sql.OutOfRange, nil
-		} else if v > math.MaxUint32 {
+			return uint32(math.MaxUint32 - uint64(-v-1)), sql.OutOfRange, nil
+		} else if int64(v) > int64(math.MaxUint32) {
 			return uint32(math.MaxUint32), sql.OutOfRange, nil
 		}
 		return uint32(v), sql.InRange, nil
 	case int8:
 		if v < 0 {
-			return uint32(math.MaxUint32 - uint(-v-1)), sql.OutOfRange, nil
-		} else if int(v) > math.MaxUint32 {
+			return uint32(math.MaxUint32 - uint64(-v-1)), sql.OutOfRange, nil
+		} else if int64(v) > int64(math.MaxUint32) {
 			return uint32(math.MaxUint32), sql.OutOfRange, nil
 		}
 		return uint32(v), sql.InRange, nil
 	case int16:
 		if v < 0 {
-			return uint32(math.MaxUint32 - uint(-v-1)), sql.OutOfRange, nil
-		} else if int(v) > math.MaxUint32 {
+			return uint32(math.MaxUint32 - uint64(-v-1)), sql.OutOfRange, nil
+		} else if int64(v) > int64(math.MaxUint32) {
 			return uint32(math.MaxUint32), sql.OutOfRange, nil
 		}
 		return uint32(v), sql.InRange, nil
 	case int32:
 		if v < 0 {
-			return uint32(math.MaxUint32 - uint(-v-1)), sql.OutOfRange, nil
-		} else if int(v) > math.MaxUint32 {
+			return uint32(math.MaxUint32 - uint64(-v-1)), sql.OutOfRange, nil
+		} else if int64(v) > int64(math.MaxUint32) {
 			return uint32(math.MaxUint32), sql.OutOfRange, nil
 		}
 		return uint32(v), sql.InRange, nil
 	case int64:
 		if v < 0 {
-			return uint32(math.MaxUint32 - uint(-v-1)), sql.OutOfRange, nil
+			return uint32(math.MaxUint32 - uint64(-v-1)), sql.OutOfRange, nil
 		} else if v > math.MaxUint32 {
 			return uint32(math.MaxUint32), sql.OutOfRange, nil
 		}
